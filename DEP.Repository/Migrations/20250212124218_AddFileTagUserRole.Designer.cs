// <auto-generated />
using System;
using DEP.Repository.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DEP.Repository.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250212124218_AddFileTagUserRole")]
    partial class AddFileTagUserRole
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DEP.Repository.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("DEP.Repository.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<int>("CourseType")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CourseId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("DEP.Repository.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DEP.Repository.Models.File", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileId"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FileTagId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FileId");

                    b.HasIndex("FileTagId");

                    b.HasIndex("PersonId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("DEP.Repository.Models.FileTag", b =>
                {
                    b.Property<int>("FileTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileTagId"));

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FileTagId");

                    b.ToTable("FileTags");
                });

            modelBuilder.Entity("DEP.Repository.Models.FileTagUserRole", b =>
                {
                    b.Property<int>("FileTagId")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("FileTagId", "Role");

                    b.ToTable("FileTagUserRole");
                });

            modelBuilder.Entity("DEP.Repository.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("DEP.Repository.Models.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModuleId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ModuleId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("DEP.Repository.Models.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonId"));

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("EducationalConsultantId")
                        .HasColumnType("int");

                    b.Property<int?>("EducationalLeaderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HiringDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Initials")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OperationCoordinatorId")
                        .HasColumnType("int");

                    b.Property<bool>("SvuApplied")
                        .HasColumnType("bit");

                    b.Property<bool>("SvuEligible")
                        .HasColumnType("bit");

                    b.HasKey("PersonId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EducationalConsultantId");

                    b.HasIndex("EducationalLeaderId");

                    b.HasIndex("LocationId");

                    b.HasIndex("OperationCoordinatorId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("DEP.Repository.Models.PersonCourse", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonCourses");
                });

            modelBuilder.Entity("DEP.Repository.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("EducationBossId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PasswordExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EducationBossId");

                    b.HasIndex("LocationId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Name = "Administrator",
                            PasswordExpiryDate = new DateTime(2025, 2, 11, 13, 42, 18, 608, DateTimeKind.Local).AddTicks(3129),
                            PasswordHash = new byte[] { 64, 67, 77, 33, 89, 81, 249, 94, 192, 112, 119, 195, 112, 163, 45, 162, 91, 6, 126, 116, 217, 148, 79, 114, 122, 254, 206, 99, 154, 79, 112, 73, 126, 136, 17, 64, 18, 195, 188, 151, 169, 246, 85, 116, 201, 23, 166, 146, 126, 81, 185, 29, 14, 42, 146, 62, 202, 102, 33, 209, 89, 112, 17, 246 },
                            PasswordSalt = new byte[] { 102, 27, 145, 136, 11, 92, 248, 116, 86, 19, 207, 137, 46, 57, 80, 169, 5, 91, 86, 43, 49, 249, 17, 10, 178, 43, 75, 116, 76, 200, 92, 55, 183, 172, 104, 80, 26, 13, 57, 227, 214, 152, 17, 104, 192, 175, 65, 190, 171, 106, 19, 217, 131, 70, 252, 114, 182, 11, 40, 197, 165, 36, 172, 195, 213, 182, 167, 65, 158, 200, 186, 109, 90, 106, 55, 249, 209, 34, 73, 167, 74, 245, 176, 208, 87, 17, 129, 151, 240, 204, 137, 39, 200, 214, 188, 220, 44, 125, 8, 33, 26, 182, 175, 31, 122, 191, 35, 81, 166, 29, 155, 190, 255, 14, 13, 248, 121, 92, 158, 151, 205, 218, 155, 159, 61, 191, 121, 166 },
                            RefreshTokenExpiryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "admin",
                            UserRole = 0
                        });
                });

            modelBuilder.Entity("DEP.Repository.Models.Book", b =>
                {
                    b.HasOne("DEP.Repository.Models.Module", "Module")
                        .WithMany("Books")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("DEP.Repository.Models.Course", b =>
                {
                    b.HasOne("DEP.Repository.Models.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("DEP.Repository.Models.File", b =>
                {
                    b.HasOne("DEP.Repository.Models.FileTag", "FileTag")
                        .WithMany()
                        .HasForeignKey("FileTagId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DEP.Repository.Models.Person", "Person")
                        .WithMany("Files")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileTag");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DEP.Repository.Models.FileTagUserRole", b =>
                {
                    b.HasOne("DEP.Repository.Models.FileTag", "FileTag")
                        .WithMany("FileTagUserRoles")
                        .HasForeignKey("FileTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileTag");
                });

            modelBuilder.Entity("DEP.Repository.Models.Person", b =>
                {
                    b.HasOne("DEP.Repository.Models.Department", "Department")
                        .WithMany("Persons")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DEP.Repository.Models.User", "EducationalConsultant")
                        .WithMany("EducationalConsultantPersons")
                        .HasForeignKey("EducationalConsultantId");

                    b.HasOne("DEP.Repository.Models.User", "EducationalLeader")
                        .WithMany("EducationLeaderPersons")
                        .HasForeignKey("EducationalLeaderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DEP.Repository.Models.Location", "Location")
                        .WithMany("Persons")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DEP.Repository.Models.User", "OperationCoordinator")
                        .WithMany("OperationCoordinatorPersons")
                        .HasForeignKey("OperationCoordinatorId");

                    b.Navigation("Department");

                    b.Navigation("EducationalConsultant");

                    b.Navigation("EducationalLeader");

                    b.Navigation("Location");

                    b.Navigation("OperationCoordinator");
                });

            modelBuilder.Entity("DEP.Repository.Models.PersonCourse", b =>
                {
                    b.HasOne("DEP.Repository.Models.Course", "Course")
                        .WithMany("PersonCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEP.Repository.Models.Person", "Person")
                        .WithMany("PersonCourses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DEP.Repository.Models.User", b =>
                {
                    b.HasOne("DEP.Repository.Models.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DEP.Repository.Models.User", "EducationBoss")
                        .WithMany("EducationLeaders")
                        .HasForeignKey("EducationBossId");

                    b.HasOne("DEP.Repository.Models.Location", "Location")
                        .WithMany("Users")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");

                    b.Navigation("EducationBoss");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("DEP.Repository.Models.Course", b =>
                {
                    b.Navigation("PersonCourses");
                });

            modelBuilder.Entity("DEP.Repository.Models.Department", b =>
                {
                    b.Navigation("Persons");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DEP.Repository.Models.FileTag", b =>
                {
                    b.Navigation("FileTagUserRoles");
                });

            modelBuilder.Entity("DEP.Repository.Models.Location", b =>
                {
                    b.Navigation("Persons");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DEP.Repository.Models.Module", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("DEP.Repository.Models.Person", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("PersonCourses");
                });

            modelBuilder.Entity("DEP.Repository.Models.User", b =>
                {
                    b.Navigation("EducationLeaderPersons");

                    b.Navigation("EducationLeaders");

                    b.Navigation("EducationalConsultantPersons");

                    b.Navigation("OperationCoordinatorPersons");
                });
#pragma warning restore 612, 618
        }
    }
}
