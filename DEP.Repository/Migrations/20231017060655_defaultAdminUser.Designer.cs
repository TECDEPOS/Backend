// <auto-generated />
using System;
using DEP.Repository.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DEP.Repository.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231017060655_defaultAdminUser")]
    partial class defaultAdminUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DEP.Repository.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("DEP.Repository.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DEP.Repository.Models.File", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileId"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FileTagId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FileId");

                    b.HasIndex("FileTagId");

                    b.HasIndex("PersonId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("DEP.Repository.Models.FileTag", b =>
                {
                    b.Property<int>("FileTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileTagId"));

                    b.Property<bool>("DKVisability")
                        .HasColumnType("bit");

                    b.Property<bool>("HRVisability")
                        .HasColumnType("bit");

                    b.Property<bool>("PKVisability")
                        .HasColumnType("bit");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FileTagId");

                    b.ToTable("FileTags");
                });

            modelBuilder.Entity("DEP.Repository.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("DEP.Repository.Models.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModuleId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ModuleId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("DEP.Repository.Models.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonId"));

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("EducationalConsultantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HiringDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Initials")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OperationCoordinatorId")
                        .HasColumnType("int");

                    b.Property<bool>("SvuApplied")
                        .HasColumnType("bit");

                    b.Property<bool>("SvuEligible")
                        .HasColumnType("bit");

                    b.HasKey("PersonId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EducationalConsultantId");

                    b.HasIndex("LocationId");

                    b.HasIndex("OperationCoordinatorId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("DEP.Repository.Models.PersonModule", b =>
                {
                    b.Property<int>("PersonModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonModuleId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("ModuleType")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("PersonModuleId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonModules");
                });

            modelBuilder.Entity("DEP.Repository.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PasswordExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Name = "Administrator",
                            PasswordExpiryDate = new DateTime(2023, 10, 16, 8, 6, 55, 426, DateTimeKind.Local).AddTicks(192),
                            PasswordHash = new byte[] { 187, 223, 173, 90, 224, 0, 56, 7, 143, 88, 238, 73, 61, 254, 88, 102, 210, 26, 136, 148, 129, 128, 45, 130, 77, 98, 11, 119, 155, 197, 232, 64, 94, 87, 57, 173, 116, 120, 160, 189, 13, 138, 199, 40, 108, 169, 44, 95, 108, 217, 179, 7, 246, 92, 21, 7, 54, 69, 75, 106, 191, 198, 228, 90 },
                            PasswordSalt = new byte[] { 156, 80, 228, 74, 64, 32, 40, 177, 51, 3, 30, 101, 44, 14, 110, 140, 238, 248, 65, 217, 136, 0, 252, 245, 148, 222, 93, 136, 216, 52, 131, 34, 92, 130, 43, 158, 68, 76, 94, 195, 21, 87, 131, 128, 252, 81, 3, 231, 247, 34, 51, 8, 197, 143, 235, 14, 146, 164, 15, 131, 108, 226, 159, 249, 5, 4, 123, 105, 115, 167, 182, 88, 188, 117, 206, 39, 77, 254, 43, 210, 64, 208, 8, 156, 212, 175, 156, 110, 231, 194, 57, 8, 64, 248, 253, 210, 49, 133, 187, 81, 142, 56, 135, 208, 0, 165, 57, 114, 14, 174, 198, 167, 184, 185, 186, 152, 104, 45, 230, 112, 120, 32, 206, 105, 165, 159, 194, 71 },
                            RefreshTokenExpiryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "admin",
                            UserRole = 0
                        });
                });

            modelBuilder.Entity("DEP.Repository.Models.Book", b =>
                {
                    b.HasOne("DEP.Repository.Models.Module", null)
                        .WithMany("Books")
                        .HasForeignKey("ModuleId");
                });

            modelBuilder.Entity("DEP.Repository.Models.File", b =>
                {
                    b.HasOne("DEP.Repository.Models.FileTag", "FileTag")
                        .WithMany()
                        .HasForeignKey("FileTagId");

                    b.HasOne("DEP.Repository.Models.Person", "Person")
                        .WithMany("Files")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileTag");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DEP.Repository.Models.Person", b =>
                {
                    b.HasOne("DEP.Repository.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("DEP.Repository.Models.User", "EducationalConsultant")
                        .WithMany("EducationalConsultantPersons")
                        .HasForeignKey("EducationalConsultantId");

                    b.HasOne("DEP.Repository.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("DEP.Repository.Models.User", "OperationCoordinator")
                        .WithMany("OperationCoordinatorPersons")
                        .HasForeignKey("OperationCoordinatorId");

                    b.Navigation("Department");

                    b.Navigation("EducationalConsultant");

                    b.Navigation("Location");

                    b.Navigation("OperationCoordinator");
                });

            modelBuilder.Entity("DEP.Repository.Models.PersonModule", b =>
                {
                    b.HasOne("DEP.Repository.Models.Module", "Module")
                        .WithMany("PersonModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEP.Repository.Models.Person", "Person")
                        .WithMany("PersonModules")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DEP.Repository.Models.Module", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("PersonModules");
                });

            modelBuilder.Entity("DEP.Repository.Models.Person", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("PersonModules");
                });

            modelBuilder.Entity("DEP.Repository.Models.User", b =>
                {
                    b.Navigation("EducationalConsultantPersons");

                    b.Navigation("OperationCoordinatorPersons");
                });
#pragma warning restore 612, 618
        }
    }
}
