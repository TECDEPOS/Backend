// <auto-generated />
using System;
using DEP.Repository.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DEP.Repository.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240124071321_EducationLeaders")]
    partial class EducationLeaders
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DEP.Repository.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("DEP.Repository.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<int>("CourseType")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CourseId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("DEP.Repository.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DEP.Repository.Models.File", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileId"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FileTagId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FileId");

                    b.HasIndex("FileTagId");

                    b.HasIndex("PersonId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("DEP.Repository.Models.FileTag", b =>
                {
                    b.Property<int>("FileTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileTagId"));

                    b.Property<bool>("DKVisability")
                        .HasColumnType("bit");

                    b.Property<bool>("HRVisability")
                        .HasColumnType("bit");

                    b.Property<bool>("PKVisability")
                        .HasColumnType("bit");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FileTagId");

                    b.ToTable("FileTags");
                });

            modelBuilder.Entity("DEP.Repository.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("DEP.Repository.Models.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModuleId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ModuleId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("DEP.Repository.Models.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonId"));

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("EducationalConsultantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HiringDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Initials")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OperationCoordinatorId")
                        .HasColumnType("int");

                    b.Property<bool>("SvuApplied")
                        .HasColumnType("bit");

                    b.Property<bool>("SvuEligible")
                        .HasColumnType("bit");

                    b.HasKey("PersonId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EducationalConsultantId");

                    b.HasIndex("LocationId");

                    b.HasIndex("OperationCoordinatorId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("DEP.Repository.Models.PersonCourse", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonCourses");
                });

            modelBuilder.Entity("DEP.Repository.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("EducationBossId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PasswordExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EducationBossId");

                    b.HasIndex("LocationId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Name = "Administrator",
                            PasswordExpiryDate = new DateTime(2024, 1, 23, 8, 13, 21, 804, DateTimeKind.Local).AddTicks(4343),
                            PasswordHash = new byte[] { 31, 138, 1, 51, 63, 36, 230, 151, 113, 150, 191, 185, 181, 221, 153, 57, 29, 184, 160, 76, 178, 223, 79, 65, 43, 209, 36, 215, 0, 10, 28, 109, 9, 27, 140, 160, 44, 240, 150, 194, 119, 25, 13, 169, 56, 62, 148, 197, 200, 32, 0, 32, 147, 253, 187, 143, 14, 216, 152, 203, 159, 25, 60, 230 },
                            PasswordSalt = new byte[] { 251, 1, 20, 57, 60, 234, 106, 66, 160, 119, 47, 151, 156, 120, 120, 208, 44, 48, 122, 50, 40, 49, 32, 46, 191, 92, 206, 22, 216, 236, 195, 45, 5, 212, 53, 133, 131, 191, 8, 97, 89, 26, 167, 83, 140, 136, 46, 81, 62, 62, 229, 171, 104, 168, 188, 101, 59, 99, 69, 248, 89, 228, 187, 61, 22, 142, 193, 179, 245, 130, 82, 53, 144, 162, 161, 220, 203, 20, 240, 147, 241, 24, 162, 100, 241, 71, 87, 111, 145, 70, 212, 107, 28, 4, 250, 208, 17, 153, 30, 155, 224, 47, 124, 54, 40, 146, 127, 169, 3, 204, 49, 57, 197, 17, 44, 167, 146, 93, 233, 178, 129, 41, 14, 203, 130, 153, 18, 186 },
                            RefreshTokenExpiryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "admin",
                            UserRole = 0
                        });
                });

            modelBuilder.Entity("DEP.Repository.Models.Book", b =>
                {
                    b.HasOne("DEP.Repository.Models.Module", "Module")
                        .WithMany("Books")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("DEP.Repository.Models.Course", b =>
                {
                    b.HasOne("DEP.Repository.Models.Module", "Module")
                        .WithMany("Courses")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("DEP.Repository.Models.File", b =>
                {
                    b.HasOne("DEP.Repository.Models.FileTag", "FileTag")
                        .WithMany()
                        .HasForeignKey("FileTagId");

                    b.HasOne("DEP.Repository.Models.Person", "Person")
                        .WithMany("Files")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileTag");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DEP.Repository.Models.Person", b =>
                {
                    b.HasOne("DEP.Repository.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("DEP.Repository.Models.User", "EducationalConsultant")
                        .WithMany("EducationalConsultantPersons")
                        .HasForeignKey("EducationalConsultantId");

                    b.HasOne("DEP.Repository.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("DEP.Repository.Models.User", "OperationCoordinator")
                        .WithMany("OperationCoordinatorPersons")
                        .HasForeignKey("OperationCoordinatorId");

                    b.Navigation("Department");

                    b.Navigation("EducationalConsultant");

                    b.Navigation("Location");

                    b.Navigation("OperationCoordinator");
                });

            modelBuilder.Entity("DEP.Repository.Models.PersonCourse", b =>
                {
                    b.HasOne("DEP.Repository.Models.Course", "Course")
                        .WithMany("PersonCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEP.Repository.Models.Person", "Person")
                        .WithMany("PersonCourses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DEP.Repository.Models.User", b =>
                {
                    b.HasOne("DEP.Repository.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("DEP.Repository.Models.User", "EducationBoss")
                        .WithMany("EducationLeaders")
                        .HasForeignKey("EducationBossId");

                    b.HasOne("DEP.Repository.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Department");

                    b.Navigation("EducationBoss");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("DEP.Repository.Models.Course", b =>
                {
                    b.Navigation("PersonCourses");
                });

            modelBuilder.Entity("DEP.Repository.Models.Module", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("DEP.Repository.Models.Person", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("PersonCourses");
                });

            modelBuilder.Entity("DEP.Repository.Models.User", b =>
                {
                    b.Navigation("EducationLeaders");

                    b.Navigation("EducationalConsultantPersons");

                    b.Navigation("OperationCoordinatorPersons");
                });
#pragma warning restore 612, 618
        }
    }
}
